// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SnowboardApp.Data;
using System;

namespace SnowboardApp.Data.Migrations
{
    [DbContext(typeof(SnowboardAppContext))]
    [Migration("20180412165332_AddedManyToMany")]
    partial class AddedManyToMany
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SnowboardApp.Domain.Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("BirthCountry");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("SnowboardApp.Domain.AthleteContest", b =>
                {
                    b.Property<int>("AthleteId");

                    b.Property<int>("ContestId");

                    b.HasKey("AthleteId", "ContestId");

                    b.HasIndex("ContestId");

                    b.ToTable("AthleteContest");
                });

            modelBuilder.Entity("SnowboardApp.Domain.AthleteHomeResort", b =>
                {
                    b.Property<int>("AthleteId");

                    b.Property<int>("HomeResortId");

                    b.HasKey("AthleteId", "HomeResortId");

                    b.HasIndex("HomeResortId");

                    b.ToTable("AthleteHomeResort");
                });

            modelBuilder.Entity("SnowboardApp.Domain.Contest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("EventLocation");

                    b.Property<string>("EventName");

                    b.Property<string>("FirstPlace");

                    b.Property<string>("SecondPlace");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("ThirdPlace");

                    b.HasKey("Id");

                    b.ToTable("Contests");
                });

            modelBuilder.Entity("SnowboardApp.Domain.HomeResort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AthleteId");

                    b.Property<string>("Country");

                    b.Property<string>("Name");

                    b.Property<int>("VerticalMeters");

                    b.HasKey("Id");

                    b.ToTable("HomeResorts");
                });

            modelBuilder.Entity("SnowboardApp.Domain.Snowboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AthelteId");

                    b.Property<int?>("AthleteId");

                    b.Property<string>("Brand");

                    b.Property<int>("Length");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Snowboards");
                });

            modelBuilder.Entity("SnowboardApp.Domain.AthleteContest", b =>
                {
                    b.HasOne("SnowboardApp.Domain.Athlete", "Athlete")
                        .WithMany("Contests")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SnowboardApp.Domain.Contest", "Contest")
                        .WithMany("Athletes")
                        .HasForeignKey("ContestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SnowboardApp.Domain.AthleteHomeResort", b =>
                {
                    b.HasOne("SnowboardApp.Domain.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SnowboardApp.Domain.HomeResort", "HomeResort")
                        .WithMany()
                        .HasForeignKey("HomeResortId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SnowboardApp.Domain.Snowboard", b =>
                {
                    b.HasOne("SnowboardApp.Domain.Athlete", "Athlete")
                        .WithMany()
                        .HasForeignKey("AthleteId");
                });
#pragma warning restore 612, 618
        }
    }
}
